// <auto-generated />
using System;
using FlightBooking.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlightBooking.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901203008_AddFlightSystem")]
    partial class AddFlightSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlightBooking.Domain.Audit.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("GuestId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<long>("LatencyMs")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryParameters")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("text");

                    b.Property<long?>("RequestSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text");

                    b.Property<long?>("ResponseSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ResultSummary")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserRoles")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_AuditEvents_CorrelationId");

                    b.HasIndex("GuestId")
                        .HasDatabaseName("IX_AuditEvents_GuestId");

                    b.HasIndex("HttpMethod")
                        .HasDatabaseName("IX_AuditEvents_HttpMethod");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_AuditEvents_IpAddress");

                    b.HasIndex("Route")
                        .HasDatabaseName("IX_AuditEvents_Route");

                    b.HasIndex("StatusCode")
                        .HasDatabaseName("IX_AuditEvents_StatusCode");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_AuditEvents_Timestamp");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("IX_AuditEvents_UserEmail");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditEvents_UserId");

                    b.HasIndex("Route", "Timestamp")
                        .HasDatabaseName("IX_AuditEvents_Route_Timestamp");

                    b.HasIndex("StatusCode", "Timestamp")
                        .HasDatabaseName("IX_AuditEvents_StatusCode_Timestamp");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_AuditEvents_UserId_Timestamp");

                    b.ToTable("AuditEvents", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Audit.AuditOutbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("GuestId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<long>("LatencyMs")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessingError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("QueryParameters")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("RequestBody")
                        .HasColumnType("text");

                    b.Property<long?>("RequestSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("text");

                    b.Property<long?>("ResponseSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ResultSummary")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserRoles")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_AuditOutbox_CorrelationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AuditOutbox_CreatedAt");

                    b.HasIndex("IsProcessed")
                        .HasDatabaseName("IX_AuditOutbox_IsProcessed");

                    b.HasIndex("NextRetryAt")
                        .HasDatabaseName("IX_AuditOutbox_NextRetryAt");

                    b.HasIndex("IsProcessed", "CreatedAt")
                        .HasDatabaseName("IX_AuditOutbox_Cleanup");

                    b.HasIndex("IsProcessed", "NextRetryAt")
                        .HasDatabaseName("IX_AuditOutbox_Processing");

                    b.ToTable("AuditOutbox", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Elevation")
                        .HasColumnType("integer");

                    b.Property<string>("IataCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("IcaoCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode")
                        .HasDatabaseName("IX_Airports_CountryCode");

                    b.HasIndex("IataCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Airports_IataCode");

                    b.HasIndex("IcaoCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Airports_IcaoCode");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Airports_IsActive");

                    b.HasIndex("City", "Country")
                        .HasDatabaseName("IX_Airports_City_Country");

                    b.ToTable("Airports", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Amenities_Category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Amenities_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Amenities_Name");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_Amenities_SortOrder");

                    b.ToTable("Amenities", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.FareClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassCode")
                        .HasDatabaseName("IX_FareClasses_ClassCode");

                    b.HasIndex("FlightId")
                        .HasDatabaseName("IX_FareClasses_FlightId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_FareClasses_IsActive");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_FareClasses_SortOrder");

                    b.HasIndex("FlightId", "ClassName")
                        .IsUnique()
                        .HasDatabaseName("IX_FareClasses_Flight_ClassName");

                    b.HasIndex("FlightId", "SortOrder")
                        .HasDatabaseName("IX_FareClasses_Flight_SortOrder");

                    b.ToTable("FareClasses", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.FareClassAmenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AdditionalCost")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<Guid>("AmenityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FareClassId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId")
                        .HasDatabaseName("IX_FareClassAmenities_AmenityId");

                    b.HasIndex("FareClassId")
                        .HasDatabaseName("IX_FareClassAmenities_FareClassId");

                    b.HasIndex("IsIncluded")
                        .HasDatabaseName("IX_FareClassAmenities_IsIncluded");

                    b.HasIndex("FareClassId", "AmenityId")
                        .IsUnique()
                        .HasDatabaseName("IX_FareClassAmenities_FareClass_Amenity");

                    b.ToTable("FareClassAmenities", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AircraftType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AirlineCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("AirlineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("interval");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Gate")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Terminal")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AirlineCode")
                        .HasDatabaseName("IX_Flights_AirlineCode");

                    b.HasIndex("DepartureDate")
                        .HasDatabaseName("IX_Flights_DepartureDate");

                    b.HasIndex("FlightNumber")
                        .HasDatabaseName("IX_Flights_FlightNumber");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Flights_IsActive");

                    b.HasIndex("RouteId")
                        .HasDatabaseName("IX_Flights_RouteId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Flights_Status");

                    b.HasIndex("RouteId", "DepartureDate")
                        .HasDatabaseName("IX_Flights_Route_Date");

                    b.HasIndex("AirlineCode", "FlightNumber", "DepartureDate")
                        .IsUnique()
                        .HasDatabaseName("IX_Flights_Unique_Flight");

                    b.ToTable("Flights", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArrivalAirportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DepartureAirportId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EstimatedFlightTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("boolean");

                    b.Property<string>("RouteCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId")
                        .HasDatabaseName("IX_Routes_ArrivalAirportId");

                    b.HasIndex("DepartureAirportId")
                        .HasDatabaseName("IX_Routes_DepartureAirportId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Routes_IsActive");

                    b.HasIndex("IsInternational")
                        .HasDatabaseName("IX_Routes_IsInternational");

                    b.HasIndex("RouteCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Routes_RouteCode");

                    b.HasIndex("DepartureAirportId", "ArrivalAirportId")
                        .IsUnique()
                        .HasDatabaseName("IX_Routes_DepartureArrival");

                    b.ToTable("Routes", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ExtraFee")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<Guid>("FareClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FareClassId")
                        .HasDatabaseName("IX_Seats_FareClassId");

                    b.HasIndex("FlightId")
                        .HasDatabaseName("IX_Seats_FlightId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Seats_IsActive");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Seats_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Seats_Type");

                    b.HasIndex("FlightId", "SeatNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Seats_Flight_SeatNumber");

                    b.HasIndex("FareClassId", "Row", "Column")
                        .HasDatabaseName("IX_Seats_FareClass_Row_Column");

                    b.ToTable("Seats", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_EmailVerificationTokens_Email");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_EmailVerificationTokens_ExpiresAt");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("IX_EmailVerificationTokens_IsUsed");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_EmailVerificationTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_EmailVerificationTokens_UserId");

                    b.ToTable("EmailVerificationTokens", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.PasswordResetToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_PasswordResetTokens_Email");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_PasswordResetTokens_ExpiresAt");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("IX_PasswordResetTokens_IsUsed");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_PasswordResetTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PasswordResetTokens_UserId");

                    b.ToTable("PasswordResetTokens", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("ReplacedByToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Roles_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 9, 1, 20, 30, 8, 107, DateTimeKind.Utc).AddTicks(6525),
                            Description = "System administrator with full access",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 9, 1, 20, 30, 8, 107, DateTimeKind.Utc).AddTicks(6531),
                            Description = "Staff member with limited administrative access",
                            IsActive = true,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 9, 1, 20, 30, 8, 107, DateTimeKind.Utc).AddTicks(6534),
                            Description = "Regular customer with booking access",
                            IsActive = true,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("EmailVerified")
                        .HasDatabaseName("IX_Users_EmailVerified");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_UserRoles_RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRoles_UserId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_UserId_RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.FareClass", b =>
                {
                    b.HasOne("FlightBooking.Domain.Flights.Flight", "Flight")
                        .WithMany("FareClasses")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.FareClassAmenity", b =>
                {
                    b.HasOne("FlightBooking.Domain.Flights.Amenity", "Amenity")
                        .WithMany("FareClassAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Flights.FareClass", "FareClass")
                        .WithMany("FareClassAmenities")
                        .HasForeignKey("FareClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("FareClass");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Flight", b =>
                {
                    b.HasOne("FlightBooking.Domain.Flights.Route", "Route")
                        .WithMany("Flights")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Route", b =>
                {
                    b.HasOne("FlightBooking.Domain.Flights.Airport", "ArrivalAirport")
                        .WithMany("ArrivalRoutes")
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Flights.Airport", "DepartureAirport")
                        .WithMany("DepartureRoutes")
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Seat", b =>
                {
                    b.HasOne("FlightBooking.Domain.Flights.FareClass", "FareClass")
                        .WithMany("Seats")
                        .HasForeignKey("FareClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Flights.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FareClass");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.EmailVerificationToken", b =>
                {
                    b.HasOne("FlightBooking.Domain.Identity.User", "User")
                        .WithMany("EmailVerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.PasswordResetToken", b =>
                {
                    b.HasOne("FlightBooking.Domain.Identity.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.RefreshToken", b =>
                {
                    b.HasOne("FlightBooking.Domain.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("FlightBooking.Domain.Identity.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FlightBooking.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Airport", b =>
                {
                    b.Navigation("ArrivalRoutes");

                    b.Navigation("DepartureRoutes");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Amenity", b =>
                {
                    b.Navigation("FareClassAmenities");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.FareClass", b =>
                {
                    b.Navigation("FareClassAmenities");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Flight", b =>
                {
                    b.Navigation("FareClasses");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("FlightBooking.Domain.Flights.Route", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FlightBooking.Domain.Identity.User", b =>
                {
                    b.Navigation("EmailVerificationTokens");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
